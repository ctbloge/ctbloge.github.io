import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.CDhRSyRB.js";const c=JSON.parse('{"title":"在Django中如何使用过滤器进行查询","description":"","frontmatter":{},"headers":[],"relativePath":"blog/Django/django-filter.md","filePath":"blog/Django/django-filter.md"}'),e={name:"blog/Django/django-filter.md"};function h(l,s,p,k,o,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="在django中如何使用过滤器进行查询" tabindex="-1">在Django中如何使用过滤器进行查询 <a class="header-anchor" href="#在django中如何使用过滤器进行查询" aria-label="Permalink to &quot;在Django中如何使用过滤器进行查询&quot;">​</a></h1><p>在Django中，过滤器查询主要用于从数据库中检索出符合条件的数据对象。Django的ORM（对象关系映射）系统允许我们使用一种类似SQL的方式，但通过Python的语法来构建查询。下面是一份简单的Django过滤器查询解析指南。</p><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><p>Django查询集（QuerySet）是模型的一个数据集合，可以对其进行过滤、排序、切片等操作。查询集是惰性执行的，这意味着只有在需要的时候才会从数据库中获取数据。</p><h2 id="基本过滤器" tabindex="-1">基本过滤器 <a class="header-anchor" href="#基本过滤器" aria-label="Permalink to &quot;基本过滤器&quot;">​</a></h2><p>Django提供了多种方法来构建查询集，其中最常用的是<code>filter()</code>、<code>exclude()</code>和<code>get()</code>。</p><h3 id="filter" tabindex="-1"><code>filter()</code> <a class="header-anchor" href="#filter" aria-label="Permalink to &quot;\`filter()\`&quot;">​</a></h3><p><code>filter()</code>方法用于返回一个满足条件的数据子集。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myapp.models </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Book</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">books </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Book.objects.filter(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">author</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="exclude" tabindex="-1"><code>exclude()</code> <a class="header-anchor" href="#exclude" aria-label="Permalink to &quot;\`exclude()\`&quot;">​</a></h3><p><code>exclude()</code>方法用于返回一个不满足条件的数据子集。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">books </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Book.objects.exclude(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">author</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="get" tabindex="-1"><code>get()</code> <a class="header-anchor" href="#get" aria-label="Permalink to &quot;\`get()\`&quot;">​</a></h3><p><code>get()</code>方法用于获取单个对象；如果结果数量不为1，则抛出异常。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">book </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Book.objects.get(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="字段查询" tabindex="-1">字段查询 <a class="header-anchor" href="#字段查询" aria-label="Permalink to &quot;字段查询&quot;">​</a></h2><p>Django允许我们根据模型的字段进行查询。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询价格大于20的书</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">books </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Book.objects.filter(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">price__gt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询标题以“编程”开头的书</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">books </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Book.objects.filter(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">title__startswith</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;编程&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询出版日期在2020年之后的书</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">books </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Book.objects.filter(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">publication_date__year__gt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2020</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="连锁条件" tabindex="-1">连锁条件 <a class="header-anchor" href="#连锁条件" aria-label="Permalink to &quot;连锁条件&quot;">​</a></h2><p>可以通过链式调用过滤器来指定多个查询条件。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">books </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Book.objects.filter(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">author</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).filter(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">publication_date__year__gt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2020</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>也可以使用<code>Q</code>对象来创建复杂的查询条件，包括<code>AND</code>、<code>OR</code>等逻辑。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> django.db.models </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Q</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询作者为张三或者出版日期在2020年之后的书</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">books </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Book.objects.filter(Q(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">author</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Q(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">publication_date__year__gt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2020</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><h2 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-label="Permalink to &quot;排序&quot;">​</a></h2><p>可以使用<code>order_by()</code>方法对查询集进行排序。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 按照出版日期从早到晚排序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">books </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Book.objects.order_by(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;publication_date&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 按照价格从高到低排序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">books </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Book.objects.order_by(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-price&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="切片" tabindex="-1">切片 <a class="header-anchor" href="#切片" aria-label="Permalink to &quot;切片&quot;">​</a></h2><p>可以通过切片（slicing）来限制返回的结果数量或者获取一部分结果。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取前10本书</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">books </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Book.objects.all()[:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 分页：获取第11到第20本书</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">books </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Book.objects.all()[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h2 id="关联查询" tabindex="-1">关联查询 <a class="header-anchor" href="#关联查询" aria-label="Permalink to &quot;关联查询&quot;">​</a></h2><p>对于关联字段，Django提供了多种方式来查询相关联的对象。</p><h3 id="正向查询" tabindex="-1">正向查询 <a class="header-anchor" href="#正向查询" aria-label="Permalink to &quot;正向查询&quot;">​</a></h3><p>假设一个<code>Book</code>模型和一个<code>Author</code>模型，其中<code>Book</code>有一个外键指向<code>Author</code>。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查询所有张三写的书</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">books </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Book.objects.filter(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">author__name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="反向查询" tabindex="-1">反向查询 <a class="header-anchor" href="#反向查询" aria-label="Permalink to &quot;反向查询&quot;">​</a></h3><p>如果要查询某个<code>Author</code>写的所有书，可以通过反向查询实现。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 假设Author模型中定义了related_name=&#39;books&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">author </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Author.objects.get(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">books </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> author.books.all()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者不定义related_name，则使用默认的&lt;model名&gt;_set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">books </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> author.book_set.all()</span></span></code></pre></div><h2 id="常用的查询修饰符" tabindex="-1">常用的查询修饰符 <a class="header-anchor" href="#常用的查询修饰符" aria-label="Permalink to &quot;常用的查询修饰符&quot;">​</a></h2><p>Django提供了一些方便的查询修饰符，比如<code>__exact</code>（精确匹配）、<code>__iexact</code>（忽略大小写的精确匹配）、<code>__contains</code>（包含）、<code>__icontains</code>（忽略大小写的包含）、<code>__in</code>（在列表中）、<code>__gt</code>（大于）、<code>__gte</code>（大于等于）、<code>__lt</code>（小于）、<code>__lte</code>（小于等于）、<code>__year</code>（年份）等。</p><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ul><li>查询集是惰性的，这意味着只有在需要的时候才会执行数据库查询。</li><li>使用<code>all()</code>方法可以获取模型的所有对象。</li><li>使用<code>count()</code>方法可以获取查询集中的对象数量。</li><li>使用<code>exists()</code>方法可以快速检查查询集是否包含任何对象。</li></ul>`,41)]))}const E=i(e,[["render",h]]);export{c as __pageData,E as default};
