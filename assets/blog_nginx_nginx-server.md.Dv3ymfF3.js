import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.CDhRSyRB.js";const c=JSON.parse('{"title":"Nginx配置中server模块的加载顺序和规则","description":"","frontmatter":{},"headers":[],"relativePath":"blog/nginx/nginx-server.md","filePath":"blog/nginx/nginx-server.md"}'),t={name:"blog/nginx/nginx-server.md"};function l(p,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="nginx配置中server模块的加载顺序和规则" tabindex="-1">Nginx配置中server模块的加载顺序和规则 <a class="header-anchor" href="#nginx配置中server模块的加载顺序和规则" aria-label="Permalink to &quot;Nginx配置中server模块的加载顺序和规则&quot;">​</a></h1><p>在Nginx的日常运维中，经常会有多个配置，多个server的情况，之前的文章分享了Nginx配置中location模块的匹配规则，这篇文章就来分享一下我对server模块的匹配规则的理解，并进行一些测试验证这些结论。</p><h2 id="配置文件加载的顺序" tabindex="-1">配置文件加载的顺序 <a class="header-anchor" href="#配置文件加载的顺序" aria-label="Permalink to &quot;配置文件加载的顺序&quot;">​</a></h2><h3 id="常用的配置文件" tabindex="-1">常用的配置文件 <a class="header-anchor" href="#常用的配置文件" aria-label="Permalink to &quot;常用的配置文件&quot;">​</a></h3><p>我们对于Nginx配置文件的认知比较常用的其实就是两种文件，第一个文件是 nginx.conf 文件，也就是Nginx在启动的时候默认读取的文件，第二种配置文件是conf.d目录下面定义的一些xxx.conf配置文件。</p><p>Nginx之所以会加载 conf.d下面的配置文件，是因为在nginx.conf里面定义了 include 属性，也就是加载额外的文件，这是一个默认的nginx.conf文件的配置，在http里面最后就是定义了加载<code>/etc/nginx/conf.d/*.conf</code>。</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">user </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nginx;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">worker_processes </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> auto;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error_log </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /var/log/nginx/error.log </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">notice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pid </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       /var/run/nginx.pid;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    worker_connections </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    include </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      /etc/nginx/mime.types;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    default_type </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> application/octet-stream;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    log_format </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> main</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remote_addr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> - $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remote_user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> [$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">time_local</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">] &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">request</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                      &#39;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">status</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">body_bytes_sent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http_referer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                      &#39;&quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http_user_agent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http_x_forwarded_for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    access_log </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /var/log/nginx/access.log  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    sendfile </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #tcp_nopush     on;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    keepalive_timeout </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 65</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #gzip  on;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    include </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/etc/nginx/conf.d/*.conf;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="文件加载顺序" tabindex="-1">文件加载顺序 <a class="header-anchor" href="#文件加载顺序" aria-label="Permalink to &quot;文件加载顺序&quot;">​</a></h3><p>首先，Nginx的配置模块在http和server里面都是可以使用include语法来加载额外的配置文件的，所以这里是一个递归加载。</p><p>如果conf.d目录下面有多个conf文件，加载的顺序又是怎样的呢？</p><p>首先说一下结论：Nginx加载配置文件会按照文件的命名排序进行加载，也就说a.conf会比b.conf先加载，然后将所有配置文件合并成一个文件。</p><p>可以用命令来查看和验证这个结论，直接执行<code>/usr/sbin/nginx -T</code>命令就可以查看到Nginx加载配置文件的顺序，并且能显示每个文件的内容，此时可以只显示加载的文件的名称来查看具体的加载顺序，执行命令<code>/usr/sbin/nginx -T|grep &quot;# configuration file&quot;</code>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@home-203 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# /usr/sbin/nginx -T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;# configuration file&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [warn] conflicting server name </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> on 0.0.0.0:12080, ignored</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configuration</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/nginx/nginx.conf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> syntax</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ok</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nginx:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> configuration</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/nginx/nginx.conf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> successful</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># configuration file /etc/nginx/nginx.conf:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># configuration file /etc/nginx/mime.types:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># configuration file /etc/nginx/conf.d/easyops.conf:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># configuration file /etc/nginx/conf.d/exsi.conf:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># configuration file /etc/nginx/conf.d/nas9527.conf:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># configuration file /etc/nginx/conf.d/test.conf:</span></span></code></pre></div><h2 id="server匹配的规则" tabindex="-1">server匹配的规则 <a class="header-anchor" href="#server匹配的规则" aria-label="Permalink to &quot;server匹配的规则&quot;">​</a></h2><h3 id="server-name-匹配模式" tabindex="-1">server_name 匹配模式 <a class="header-anchor" href="#server-name-匹配模式" aria-label="Permalink to &quot;server_name 匹配模式&quot;">​</a></h3><p><code>server_name</code>是Nginx配置中用于指定虚拟主机（server）所响应的域名或IP地址的指令。<code>server_name</code>支持多种格式。</p><h4 id="_1-精确匹配" tabindex="-1">1. 精确匹配 <a class="header-anchor" href="#_1-精确匹配" aria-label="Permalink to &quot;1. 精确匹配&quot;">​</a></h4><p>指定一个确切的域名或IP地址，只有请求的域名或IP地址与之完全匹配时，虚拟主机才会生效。</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">example.com;</span></span></code></pre></div><p>精确域名匹配还可以同时设置多个域名作为匹配项：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">example.com example2.com exampl3.com;</span></span></code></pre></div><h4 id="_2-通配符前缀匹配" tabindex="-1">2. 通配符前缀匹配 <a class="header-anchor" href="#_2-通配符前缀匹配" aria-label="Permalink to &quot;2. 通配符前缀匹配&quot;">​</a></h4><p>使用通配符<code>*</code>表示匹配任意字符。例如，<code>*.example.com</code>匹配所有以<code>.example.com</code>结尾的域名。</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">*.example.com;</span></span></code></pre></div><h4 id="_3-通配符后缀匹配" tabindex="-1">3. 通配符后缀匹配 <a class="header-anchor" href="#_3-通配符后缀匹配" aria-label="Permalink to &quot;3. 通配符后缀匹配&quot;">​</a></h4><p>使用通配符<code>*</code>表示匹配任意字符。例如，<code>subdomain.*</code>匹配所有以<code>subdomain.</code>开头的域名。</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subdomain.*;</span></span></code></pre></div><h4 id="_4-正则表达式匹配" tabindex="-1">4. 正则表达式匹配 <a class="header-anchor" href="#_4-正则表达式匹配" aria-label="Permalink to &quot;4. 正则表达式匹配&quot;">​</a></h4><p>使用正则表达式进行更灵活的匹配。以<code>~</code>开头表示区分大小写的正则表达式匹配，而以<code>~*</code>开头表示不区分大小写的正则表达式匹配。</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server_name ~</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">^sub\\d+\\.example\\.com$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>这个例子会匹配诸如 <code>sub123.example.com</code>、<code>sub456.example.com</code> 等域名。</p><h4 id="_5-空值匹配" tabindex="-1">5. 空值匹配 <a class="header-anchor" href="#_5-空值匹配" aria-label="Permalink to &quot;5. 空值匹配&quot;">​</a></h4><p>如果<code>server_name</code>为空，表示不匹配任何域名。</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server_name </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>这些是<code>server_name</code>指令的几种常见格式。</p><p>server的匹配没有优先级之分，按照配置的加载顺序，只要匹配就返回。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>根据Nginx的文档，还有一些网上资料，我画了一个自己理解的匹配规则的流程图：</p><p><img src="https://cdn.jsdelivr.net/gh/Hopetree/blog-img@main/2023/12/Nginx%E5%8C%B9%E9%85%8Dserver%E8%A7%84%E5%88%99.png" alt="Nginx配置server匹配规则" title="Nginx配置server匹配规则"></p><p><strong>我的结论：</strong></p><ul><li>Nginx收到一个请求的时候先查找监听了该端口的server，如果没有任何server监听请求端口则直接拒绝请求</li><li>如果监听该端口的server有多个，则取决于请求头的Host与哪个server的域名（server_name）匹配</li><li>如果没有匹配的server_name，则将请求交给监听该端口的默认的server处理，而这个“默认”的server可以使用default_server 属性进行指定，否则第一个监听该端口的server就是默认的。</li><li>如果匹配到多个server的server_name和监听端口相同，则按照server的加载先后顺序生效，先匹配的先生效。</li></ul><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li><a href="https://blog.csdn.net/qq_35952638/article/details/100163824" title="Nginx配置中没有server_name会怎样？" target="_blank" rel="noreferrer">Nginx配置中没有server_name会怎样？</a></li><li><a href="https://blog.csdn.net/yin18827152962/article/details/122551492" title="【实际操作解决自己对nginx的listen和server_name以及dns的疑惑】" target="_blank" rel="noreferrer">实际操作解决自己对nginx的listen和server_name以及dns的疑惑</a></li></ul>`,43)]))}const g=i(t,[["render",l]]);export{c as __pageData,g as default};
