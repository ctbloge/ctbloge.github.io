import{_ as a,c as s,o as e,ag as i}from"./chunks/framework.CDhRSyRB.js";const g=JSON.parse('{"title":"Git 提交信息规范与最佳实践","description":"","frontmatter":{},"headers":[],"relativePath":"blog/git/git-commit.md","filePath":"blog/git/git-commit.md"}'),n={name:"blog/git/git-commit.md"};function l(d,t,o,p,h,r){return e(),s("div",null,t[0]||(t[0]=[i(`<h1 id="git-提交信息规范与最佳实践" tabindex="-1">Git 提交信息规范与最佳实践 <a class="header-anchor" href="#git-提交信息规范与最佳实践" aria-label="Permalink to &quot;Git 提交信息规范与最佳实践&quot;">​</a></h1><p>在日常开发中，Git 提交信息（commit message）不仅仅是记录代码变更的日志，更是团队协作、项目管理和自动化流程的核心组成部分。良好的提交信息规范可以帮助团队提高协作效率、自动化生成变更日志（changelog）、更清晰地回溯历史。</p><p>我们公司遵循 <a href="https://github.com/lob/generate-changelog#usage" target="_blank" rel="noreferrer">https://github.com/lob/generate-changelog#usage</a>&lt;/<a href="https://github.com/lob/generate-changelog#usage" target="_blank" rel="noreferrer">https://github.com/lob/generate-changelog#usage</a>&gt; 的书写方式</p><p>本文将详细探讨 Git 提交信息规范，包括命名约定、换行规则、常见工具的配合以及其他最佳实践。</p><h2 id="_1-git-提交信息规范的重要性" tabindex="-1">1. Git 提交信息规范的重要性 <a class="header-anchor" href="#_1-git-提交信息规范的重要性" aria-label="Permalink to &quot;1. Git 提交信息规范的重要性&quot;">​</a></h2><ul><li>可读性：清晰的提交信息能够快速告诉开发者本次变更的目的，避免需要阅读大量代码来理解提交。</li><li>协作：团队中的每个成员都能快速了解变更背景和细节，提升沟通效率。</li><li>自动化支持：工具如 generate-changelog、semantic-release、commitlint 等依赖于规范化的提交信息来自动化生成变更日志、版本发布、错误修复跟踪等。</li><li>代码审查与回溯：良好的提交信息可以帮助开发者在回溯历史时迅速找到相关改动，而无需重复审查整个代码库。</li></ul><h2 id="_2-git-提交信息的推荐格式" tabindex="-1">2. Git 提交信息的推荐格式 <a class="header-anchor" href="#_2-git-提交信息的推荐格式" aria-label="Permalink to &quot;2. Git 提交信息的推荐格式&quot;">​</a></h2><h3 id="_2-1-提交信息标准结构" tabindex="-1">2.1 提交信息标准结构 <a class="header-anchor" href="#_2-1-提交信息标准结构" aria-label="Permalink to &quot;2.1 提交信息标准结构&quot;">​</a></h3><p>一个规范的 Git 提交信息通常遵循以下结构：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;footer&gt;</span></span></code></pre></div><p>解释：</p><ul><li><code>&lt;type&gt;</code>：表示提交的类型，常见的有 feat（新功能）、fix（修复）、docs（文档）、style（格式调整）等。</li><li><code>&lt;scope&gt;</code>：可选，表示提交的范围或模块，如 auth、api 等。</li><li><code>&lt;subject&gt;</code>：简短的描述，通常限定在 50 个字符以内，采用祈使句，简洁明了。</li><li><code>&lt;body&gt;</code>：可选，详细描述本次提交的背景、原因及实施细节。推荐每行不超过 72 个字符。</li><li><code>&lt;footer&gt;</code>：可选，通常用来标注 BREAKING CHANGE 或关闭的 issue 编号。</li></ul><p>示例：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>feat(auth): add support for two-factor authentication</span></span>
<span class="line"><span></span></span>
<span class="line"><span>This commit introduces two-factor authentication (2FA) to enhance security</span></span>
<span class="line"><span>during login. It uses a time-based one-time password (TOTP) generator app.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>BREAKING CHANGE: This change removes the old login method that didn&#39;t require 2FA.</span></span></code></pre></div><h2 id="_3-git-提交信息的命名约定" tabindex="-1">3. Git 提交信息的命名约定 <a class="header-anchor" href="#_3-git-提交信息的命名约定" aria-label="Permalink to &quot;3. Git 提交信息的命名约定&quot;">​</a></h2><p>Conventional Commits 是一种规范化的提交信息格式，它规定了如何使用统一的类型和格式来编写提交信息。通过这种格式，我们可以自动生成版本号、变更日志，并通过工具如 semantic-release 来自动发布版本。</p><p>常见的提交类型包括：</p><table tabindex="0"><thead><tr><th>类型</th><th>描述</th><th>适用场景</th></tr></thead><tbody><tr><td><code>feat</code></td><td>新特性</td><td>增加新功能</td></tr><tr><td><code>fix</code></td><td>修复问题</td><td>修复 bug</td></tr><tr><td><code>docs</code></td><td>文档更新</td><td>修改文档</td></tr><tr><td><code>style</code></td><td>格式调整（无逻辑变更）</td><td>修改代码格式，如缩进、空格</td></tr><tr><td><code>refactor</code></td><td>代码重构</td><td>重构代码，非修复性改动</td></tr><tr><td><code>test</code></td><td>添加/修改测试</td><td>修改测试代码</td></tr><tr><td><code>chore</code></td><td>其他杂项任务</td><td>比如更新依赖、构建工具等</td></tr></tbody></table><p>示例：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fix(user): handle edge case where username is null</span></span></code></pre></div><h3 id="_4-换行规则" tabindex="-1">4. 换行规则 <a class="header-anchor" href="#_4-换行规则" aria-label="Permalink to &quot;4. 换行规则&quot;">​</a></h3><p>在提交信息中，换行并不仅仅是为了可读性。换行在某些情况下也有结构化的作用，特别是在使用自动化工具时。良好的换行能够确保工具能正确解析提交信息的各个部分。</p><h3 id="_4-1-提交信息中的换行规则" tabindex="-1">4.1 提交信息中的换行规则 <a class="header-anchor" href="#_4-1-提交信息中的换行规则" aria-label="Permalink to &quot;4.1 提交信息中的换行规则&quot;">​</a></h3><table tabindex="0"><thead><tr><th>部分</th><th>是否换行</th><th>说明</th></tr></thead><tbody><tr><td>第一行（subject）</td><td>❌ 不应换行</td><td>简洁明了，最多 50~72 个字符</td></tr><tr><td>第二行</td><td>✅ 必须为空行</td><td>用于分隔 subject 和 body</td></tr><tr><td>第三行及以后（body）</td><td>✅ 每行不超过 72 个字符</td><td>可换行描述变更内容</td></tr><tr><td>footer</td><td>✅ 可另起一段</td><td>用来描述 BREAKING CHANGE、关闭 issue 编号等</td></tr></tbody></table><p>示例：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>feat(auth): add new login flow</span></span>
<span class="line"><span></span></span>
<span class="line"><span>This commit refactors the login flow to include multi-factor authentication.</span></span>
<span class="line"><span>It also improves the session handling and timeout mechanisms.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>BREAKING CHANGE: The session expiration logic has been completely redesigned.</span></span></code></pre></div><h2 id="_5-进行多行提交信息" tabindex="-1">5. 进行多行提交信息 <a class="header-anchor" href="#_5-进行多行提交信息" aria-label="Permalink to &quot;5. 进行多行提交信息&quot;">​</a></h2><h3 id="_5-1-使用多个-m-参数" tabindex="-1">5.1 使用多个 -m 参数 <a class="header-anchor" href="#_5-1-使用多个-m-参数" aria-label="Permalink to &quot;5.1 使用多个 -m 参数&quot;">​</a></h3><p>通过多个 -m 参数可以轻松创建多行的提交信息：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;feat(auth): add login check&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;This prevents users from staying logged in with expired tokens.&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;BREAKING CHANGE: requires token refresh endpoint.&quot;</span></span></code></pre></div><h3 id="_5-2-使用文本文件提交" tabindex="-1">5.2 使用文本文件提交 <a class="header-anchor" href="#_5-2-使用文本文件提交" aria-label="Permalink to &quot;5.2 使用文本文件提交&quot;">​</a></h3><p>对于较长的提交信息，可以将提交内容写入文件，然后通过 git commit -F 提交：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;feat: add user pagination\\n\\nThis allows users to paginate their data.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit-msg.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -F</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit-msg.txt</span></span></code></pre></div>`,33)]))}const u=a(n,[["render",l]]);export{g as __pageData,u as default};
