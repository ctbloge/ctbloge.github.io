import{_ as i,c as a,o as n,ag as h}from"./chunks/framework.CDhRSyRB.js";const g=JSON.parse('{"title":"把 Celery 定时任务变成实时触发的任务","description":"","frontmatter":{},"headers":[],"relativePath":"blog/Django/run-celery-task-now.md","filePath":"blog/Django/run-celery-task-now.md"}'),t={name:"blog/Django/run-celery-task-now.md"};function k(l,s,p,e,r,E){return n(),a("div",null,s[0]||(s[0]=[h(`<h1 id="把-celery-定时任务变成实时触发的任务" tabindex="-1">把 Celery 定时任务变成实时触发的任务 <a class="header-anchor" href="#把-celery-定时任务变成实时触发的任务" aria-label="Permalink to &quot;把 Celery 定时任务变成实时触发的任务&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>你是否有这种场景，就是自己的平台定义了很多定时任务，但是有的时候需要马上执行一个定时任务，并且可能还需要在执行的时候重新配置执行参数。之前应对这种场景，我都是临时修改任务执行时间来触发任务，这篇文章来分享一下我把这种需求开发成平台功能的经验。</p><h2 id="功能开发" tabindex="-1">功能开发 <a class="header-anchor" href="#功能开发" aria-label="Permalink to &quot;功能开发&quot;">​</a></h2><p>这个功能主要涉及两个页面，一个是任务执行页面，需要自行开发，第二个是执行结果展示页面，可以直接使用原本的定时任务结果显示页面所以不用单独开发。后端开发只涉及一个接口，就是任务的执行接口，用来触发任务并返回任务执行ID给前端。</p><h3 id="前端页面开发" tabindex="-1">前端页面开发 <a class="header-anchor" href="#前端页面开发" aria-label="Permalink to &quot;前端页面开发&quot;">​</a></h3><p>为了跟博客本身的框架统一，前端我依然使用 Bootstrap4 作为 UI 框架，这里涉及的组件就是表单组件，使用表单组即可，具体见效果图。</p><h4 id="_1-页面需求" tabindex="-1">1. 页面需求 <a class="header-anchor" href="#_1-页面需求" aria-label="Permalink to &quot;1. 页面需求&quot;">​</a></h4><p>前端页面只需要提供一个页面即可，但是页面有三种状态：</p><ol><li>访问页面初始状态，进入任务选择页面，页面应该提供所有定时任务作为备选项</li><li>定时任务选中状态，选中待执行的任务后，应该自动带出该任务的执行参数，并且可以编辑参数</li><li>任务执行完成状态，此时应该显示执行后的任务ID，并且可以跳转到任务结果展示页面</li></ol><div class="tip custom-block"><p class="custom-block-title">解疑</p><p>为什么我上面说只需要一个页面即可，并且只提到了任务的执行ID，没有提到任务的执行结果信息如何展示？这是因为这里只需要去触发任务的执行就行，这种执行跟定时任务到点执行效果是一样的，所以执行完成之后会自动把结果更新到后台数据中，所以不需要单独提供页面展示结果，只需要提供一个超链接跳转到后台的结果页面就行，具体操作后续再讲。</p></div><h4 id="_2-请求页面" tabindex="-1">2. 请求页面 <a class="header-anchor" href="#_2-请求页面" aria-label="Permalink to &quot;2. 请求页面&quot;">​</a></h4><p>先看一下我的请求页面初始状态：</p><p><img src="https://cdn.jsdelivr.net/gh/Hopetree/blog-img@main/2024/202409271456320.webp" alt="请求页面初始状态"></p><p>然后可以选择任意一个定时任务：</p><p><img src="https://cdn.jsdelivr.net/gh/Hopetree/blog-img@main/2024/202409271456321.webp" alt="任意一个定时任务"></p><p>接着是任务选择之后自动带出任务参数，并且可以编辑参数，输入框还会随着参数的内容自动伸缩：</p><p><img src="https://cdn.jsdelivr.net/gh/Hopetree/blog-img@main/2024/202409271456322.webp" alt="自动带出任务参数"></p><h4 id="_3-结果展示" tabindex="-1">3. 结果展示 <a class="header-anchor" href="#_3-结果展示" aria-label="Permalink to &quot;3. 结果展示&quot;">​</a></h4><p>结果首先会在提交后在当前页面显示任务的ID，并可以通过任务ID的超链接跳转到任务结果详情页面：</p><p><img src="https://cdn.jsdelivr.net/gh/Hopetree/blog-img@main/2024/202409271456323.webp" alt="显示任务ID"></p><p>点击任务ID后跳转到任务详情页面，也就是任务后台，之后的任务详情就跟定时任务执行没啥区别，这里就不说了：</p><p><img src="https://cdn.jsdelivr.net/gh/Hopetree/blog-img@main/2024/202409271508776.png" alt="任务后台"></p><p>由于任务只有在结束（状态为成功或者失败）后才会更新到后台数据中，所有对于有些耗时长的任务需要等待刷新。</p><h4 id="_4-前端开发技巧" tabindex="-1">4. 前端开发技巧 <a class="header-anchor" href="#_4-前端开发技巧" aria-label="Permalink to &quot;4. 前端开发技巧&quot;">​</a></h4><p>虽然页面之后一个，但是实际上做的一些处理还是比较多的，简单分享一下需求点和实现思路：</p><ol><li>需要提供任务作为可选项，此处直接使用 Django 的视图函数传递给前端即可</li><li>选择一个任务后要带出任务的参数，这个可以使用 js 实现，把参数首先使用 Django 的模板存到标签的 <code>data</code> 属性中，然后根据选择的任务加载属性的值</li><li>实现输入框随着参数的内容自动缩放，此处使用 js 实现，需要监听输入框内容并实时修改输入框的属性</li><li>执行结果回写，js 实现，将接口返回结果显示成 html 内容即可</li></ol><h3 id="后端视图开发" tabindex="-1">后端视图开发 <a class="header-anchor" href="#后端视图开发" aria-label="Permalink to &quot;后端视图开发&quot;">​</a></h3><h4 id="_1-选择任务的视图函数" tabindex="-1">1. 选择任务的视图函数 <a class="header-anchor" href="#_1-选择任务的视图函数" aria-label="Permalink to &quot;1. 选择任务的视图函数&quot;">​</a></h4><p>由于前端需要拿到所有定时任务作为可选项，所以首先需要改造后端来返回，这里要定义一个视图函数用来显示任务执行页面，并在视图中传递任务，代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> celery </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current_app</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> django.contrib.auth.decorators </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user_passes_test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> django.http </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JsonResponse</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> django.shortcuts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> render</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> django_celery_beat.models </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PeriodicTask</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> is_admin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.is_authenticated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.is_staff  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 确保用户为管理员</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@user_passes_test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(is_admin)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run_task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # tasks = PeriodicTask.objects.filter(enabled=True) # 只返回启用的任务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tasks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PeriodicTask.objects.all()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tasks&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: tasks}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> render(request, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;blog/runTask.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context)</span></span></code></pre></div><p>定时任务是在模型 <code>PeriodicTask</code> 中的，这个是 <code>django_celery_beat</code> 这个组件定义的模型，只需要去获取即可。</p><h4 id="_2-执行任务的视图函数" tabindex="-1">2. 执行任务的视图函数 <a class="header-anchor" href="#_2-执行任务的视图函数" aria-label="Permalink to &quot;2. 执行任务的视图函数&quot;">​</a></h4><p>这里需要提供一个执行任务的接口，供前端调用，并返回直接结果，代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@user_passes_test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(is_admin)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute_task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 获取任务名称和参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        task_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">POST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;task_name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">POST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;args&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;[]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># args 应该是 JSON 格式的字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        kwargs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">POST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;kwargs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># kwargs 应该是 JSON 格式的字符串</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> task_name:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JsonResponse({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Task name is required&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # 将 JSON 字符串转换为 Python 对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json.loads(args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            kwargs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json.loads(kwargs)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        except</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json.JSONDecodeError:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JsonResponse({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Invalid JSON format for args or kwargs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isinstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">or</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isinstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kwargs, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JsonResponse({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Invalid type args or kwargs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 使用 send_task 动态执行任务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current_app.send_task(task_name, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 返回任务 ID 和状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JsonResponse({</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Task executed&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &#39;task_id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: result.id,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &#39;task_status&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: result.status</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JsonResponse({</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Invalid request method&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">405</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>这个函数大部分内容都是在做数据校验，保证执行的任务参数是符合要求的，真正的关键代码只有一行，就是任务的执行：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current_app.send_task(task_name, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kwargs)</span></span></code></pre></div><p>这个代码太关键了，因为只有使用这种方式去执行任务，才可以保证任务的执行跟本身的定时任务执行是一个效果，进而保证了任务的结果可以正常的更新到后台中。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>显示定时任务实时执行功能后，解决了我很多常用问题，至此定时任务就不再仅仅是一个在特定时间点自动执行的任务，而是变成了一个可以随时运行的脚本。</p><p>于是，我后续可能参考这次的改造，给平台添加一个可以提交 Python 代码并直接执行代码的能力，让执行任务的灵活性进一步加强。</p>`,41)]))}const y=i(t,[["render",k]]);export{g as __pageData,y as default};
