import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.CDhRSyRB.js";const c=JSON.parse('{"title":"使用 Docker 搭建个人私有化 Git 服务：Gitea + SSH 配置实践","description":"","frontmatter":{},"headers":[],"relativePath":"blog/git/install-gitea.md","filePath":"blog/git/install-gitea.md"}'),n={name:"blog/git/install-gitea.md"};function l(h,s,p,k,r,o){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="使用-docker-搭建个人私有化-git-服务-gitea-ssh-配置实践" tabindex="-1">使用 Docker 搭建个人私有化 Git 服务：Gitea + SSH 配置实践 <a class="header-anchor" href="#使用-docker-搭建个人私有化-git-服务-gitea-ssh-配置实践" aria-label="Permalink to &quot;使用 Docker 搭建个人私有化 Git 服务：Gitea + SSH 配置实践&quot;">​</a></h1><p>本文介绍了如何使用 Docker 搭建轻量级的私有 Git 服务 Gitea，适合个人或小团队使用。内容涵盖 Gitea 的资源优势、容器化部署步骤、端口映射与数据挂载方法，并重点讲解了 SSH 配置中的常见问题及解决方案，确保 clone 和 push 操作顺畅。适合对代码托管安全性和资源控制有较高要求的开发者参考。</p><h2 id="一、为什么选择私有化-git" tabindex="-1">一、为什么选择私有化 Git？ <a class="header-anchor" href="#一、为什么选择私有化-git" aria-label="Permalink to &quot;一、为什么选择私有化 Git？&quot;">​</a></h2><p>在日常开发中，使用 GitHub、Gitee 等平台虽然便捷，但也有以下局限：</p><ul><li>代码隐私无法保障，尤其在内网环境或私密项目中</li><li>对第三方平台的依赖强，稳定性和政策风险不可控</li><li>多数平台对私有仓库数量、协作人数存在限制</li></ul><p>因此，选择一个轻量级的私有 Git 服务，搭建在本地或私有云上，是一种更灵活、安全的方式。</p><h2 id="二、选择-gitea-的原因" tabindex="-1">二、选择 Gitea 的原因 <a class="header-anchor" href="#二、选择-gitea-的原因" aria-label="Permalink to &quot;二、选择 Gitea 的原因&quot;">​</a></h2><p>Gitea 是一个开源的、自托管的 Git 服务平台，拥有以下优点：</p><h3 id="_1-极轻量资源占用" tabindex="-1">1. 极轻量资源占用 <a class="header-anchor" href="#_1-极轻量资源占用" aria-label="Permalink to &quot;1. 极轻量资源占用&quot;">​</a></h3><table tabindex="0"><thead><tr><th>项目</th><th>占用情况</th></tr></thead><tbody><tr><td>内存</td><td>~60MB 空闲启动</td></tr><tr><td>CPU</td><td>几乎为零，除非大规模并发</td></tr><tr><td>存储</td><td>主要占用仓库与日志，按需扩展</td></tr></tbody></table><p>相比 GitLab（动辄几百 MB 内存起步），Gitea 更适合个人或小团队部署。</p><h3 id="_2-功能覆盖完整" tabindex="-1">2. 功能覆盖完整 <a class="header-anchor" href="#_2-功能覆盖完整" aria-label="Permalink to &quot;2. 功能覆盖完整&quot;">​</a></h3><ul><li>支持代码仓库管理、Pull Request、Issue、Wiki、CI/CD（集成 Drone）</li><li>支持 SSH 和 HTTPS 两种 clone/push 模式</li><li>提供 API 和 Webhooks，便于与其他系统集成</li></ul><h2 id="三、docker-compose-部署-gitea" tabindex="-1">三、Docker Compose 部署 Gitea <a class="header-anchor" href="#三、docker-compose-部署-gitea" aria-label="Permalink to &quot;三、Docker Compose 部署 Gitea&quot;">​</a></h2><p>容器化部署直接使用官方给的文件就行，按需自行修改：<a href="https://docs.gitea.com/zh-cn/installation/install-with-docker" title="https://docs.gitea.com/zh-cn/installation/install-with-docker" target="_blank" rel="noreferrer">https://docs.gitea.com/zh-cn/installation/install-with-docker</a></p><p>部署非常简单，通过如下 <code>docker-compose.yml</code> 文件即可完成：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  gitea</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    external</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker.gitea.com/gitea:Django.23.7</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gitea</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">USER_UID=1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">USER_GID=1000</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gitea</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/data/gitea:/data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/etc/timezone:/etc/timezone:ro</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/etc/localtime:/etc/localtime:ro</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;13000:3000&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;222:22&quot;</span></span></code></pre></div><h3 id="文件说明" tabindex="-1">文件说明： <a class="header-anchor" href="#文件说明" aria-label="Permalink to &quot;文件说明：&quot;">​</a></h3><ul><li><code>/data/gitea:/data</code>：Gitea 所有数据，包括仓库、配置文件、用户信息等</li><li><code>13000:3000</code>：本地访问 Gitea 的 Web 管理界面 <a href="http://localhost:13000" target="_blank" rel="noreferrer">http://localhost:13000</a></li><li><code>222:22</code>：将容器内 SSH 服务映射到宿主机 222 端口</li></ul><p>启动方式：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><h2 id="四、配置-ssh-支持-重要" tabindex="-1">四、配置 SSH 支持（重要） <a class="header-anchor" href="#四、配置-ssh-支持-重要" aria-label="Permalink to &quot;四、配置 SSH 支持（重要）&quot;">​</a></h2><p>Gitea 默认认为 SSH 使用的是 <strong>22 端口</strong>，但我们容器中实际映射的是 <strong>222</strong>，因此需要额外配置。</p><p>如果不进行配置，那么在页面中提供的 ssh 地址是不带端口的，这样默认就是使用 22 端口，会导致连接不了，改了配置的效果是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/Hopetree/blog-img@main/2025/202504151540738.png" alt=""></p><h3 id="_1-修改-gitea-的-app-ini-配置" tabindex="-1">1. 修改 Gitea 的 app.ini 配置 <a class="header-anchor" href="#_1-修改-gitea-的-app-ini-配置" aria-label="Permalink to &quot;1. 修改 Gitea 的 app.ini 配置&quot;">​</a></h3><p>宿主机中 <code>/data/gitea/gitea/conf/app.ini</code>（容器内为 <code>/data/gitea/conf/app.ini</code>），加入或修改以下内容：</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[server]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DOMAIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           = 100.88.88.203</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SSH_DOMAIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       = 100.88.88.203</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SSH_PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         = 222</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">START_SSH_SERVER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SSH_LISTEN_PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  = 22</span></span></code></pre></div><p><strong>字段说明</strong>：</p><ul><li><code>SSH_DOMAIN</code>：Web 页面展示的 clone 地址使用的主机名</li><li><code>SSH_PORT</code>：Web 页面展示的 SSH 端口（就是你映射的 222）</li><li><code>SSH_LISTEN_PORT=22</code>：容器内部仍监听 22 端口</li><li><code>START_SSH_SERVER=false</code>：关闭 Gitea 内置 SSH Server（使用容器内 sshd）</li></ul><p>配置完成后，重启容器：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gitea</span></span></code></pre></div><h3 id="_2-验证-ssh-地址" tabindex="-1">2. 验证 SSH 地址 <a class="header-anchor" href="#_2-验证-ssh-地址" aria-label="Permalink to &quot;2. 验证 SSH 地址&quot;">​</a></h3><p>刷新 Gitea Web 页面，点击仓库的“Clone”按钮，应该显示：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh://git@100.88.88.203:222/your_user/your_repo.git</span></span></code></pre></div><h3 id="_3-客户端配置-ssh-可选" tabindex="-1">3. 客户端配置 SSH（可选） <a class="header-anchor" href="#_3-客户端配置-ssh-可选" aria-label="Permalink to &quot;3. 客户端配置 SSH（可选）&quot;">​</a></h3><p>为避免每次 push 时指定端口，可以在开发机的 <code>~/.ssh/config</code> 中添加：</p><div class="language-ssh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ssh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Host gitea</span></span>
<span class="line"><span>    HostName 100.88.88.203</span></span>
<span class="line"><span>    Port 222</span></span>
<span class="line"><span>    User git</span></span></code></pre></div><p>这样就可以使用别名：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gitea:your_user/your_repo.git</span></span></code></pre></div><h2 id="五、总结" tabindex="-1">五、总结 <a class="header-anchor" href="#五、总结" aria-label="Permalink to &quot;五、总结&quot;">​</a></h2><p>通过 Gitea + Docker + SSH 的组合，可以非常高效地搭建起个人私有 Git 服务，具有如下优势：</p><ul><li>✅ 资源占用低，可运行在轻量主机或虚拟机中</li><li>✅ 支持完整 Git 流程和常用 DevOps 功能</li><li>✅ 容器化部署，快速、可维护</li><li>✅ SSH 方式安全高效，适配各种开发场景</li></ul><p>非常适合追求极简与效率的开发者进行自托管实践。</p>`,44)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
