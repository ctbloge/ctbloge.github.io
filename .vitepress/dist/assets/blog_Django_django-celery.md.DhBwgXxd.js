import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.CDhRSyRB.js";const c=JSON.parse('{"title":"Django使用Celery实现异步和定时任务功能","description":"","frontmatter":{},"headers":[],"relativePath":"blog/Django/django-celery.md","filePath":"blog/Django/django-celery.md"}'),e={name:"blog/Django/django-celery.md"};function p(h,s,t,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="django使用celery实现异步和定时任务功能" tabindex="-1">Django使用Celery实现异步和定时任务功能 <a class="header-anchor" href="#django使用celery实现异步和定时任务功能" aria-label="Permalink to &quot;Django使用Celery实现异步和定时任务功能&quot;">​</a></h1><h2 id="安装celery依赖" tabindex="-1">安装celery依赖 <a class="header-anchor" href="#安装celery依赖" aria-label="Permalink to &quot;安装celery依赖&quot;">​</a></h2><p>我在使用celery之前也是看了一些相关教程的，很多Django使用celery的教程会让安装<code>django-celery</code>这个库，但是我对比了一些指导后觉得没必要，具体需要安装的依赖以我这篇文章为参考即可。</p><p>以下几个库可以直接安装：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">celery</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=linux.linux.2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">django-celery-beat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=2.2.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">django-celery-results</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=2.0.Django</span></span></code></pre></div><p>顺便附带一下我Django的版本信息，以及redis的版本信息，因为celery会使用到redis，所以redis库是前提，我博客本身就有redis作为缓存，所以就不单独安装，只是附带一下相关的版本信息.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Django</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=2.2.28</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">redis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=3.3.8</span></span></code></pre></div><p>为什么我这里会强调版本信息呢？因为我是踩过坑的，我第一次没有指定celery版本的时候默认给我安装了一个5+的版本，然后使用的时候一直会报错，查了一堆相关说发现是版本兼容问题，所以我根据Django的版本发布时间去找了那个时间段celery的版本，也就是上面使用的4.4左右的版本。所以如果你使用的Django版本跟我这个差别很大，可以使用同样的方式去找到合适的依赖版本。</p><h2 id="添加配置信息" tabindex="-1">添加配置信息 <a class="header-anchor" href="#添加配置信息" aria-label="Permalink to &quot;添加配置信息&quot;">​</a></h2><p>首先说明一下上面安装的3个依赖是干嘛的：</p><ul><li><code>celery</code> 是主要的依赖库，就是python使用的celery的sdk</li><li><code>django-celery-beat</code> 是一个Django应用，主要是方便用后台管理定时任务，非必需单推荐安装</li><li><code>django-celery-results</code> 也是一个Django应用，用来记录celery定时任务的结果，非必需单推荐安装</li></ul><h3 id="添加应用" tabindex="-1">添加应用 <a class="header-anchor" href="#添加应用" aria-label="Permalink to &quot;添加应用&quot;">​</a></h3><p>安装完依赖之后，把上面的两个应用添加到Django配置文件的<code>INSTALLED_APPS</code>里面：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">INSTALLED_APPS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	...</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&#39;django_celery_results&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># celery结果</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&#39;django_celery_beat&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># celery定时任务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="添加celery配置信息" tabindex="-1">添加celery配置信息 <a class="header-anchor" href="#添加celery配置信息" aria-label="Permalink to &quot;添加celery配置信息&quot;">​</a></h3><p>在项目的配置文件中添加如下配置信息，具体的配置作用见注释：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 跟缓存的redis配置类似，使用不同的库就行</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CELERY_BROKER_URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;redis://</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/Django&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(izone_redis_host, izone_redis_port)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 时区跟Django的一致</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CELERY_TIMEZONE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> TIME_ZONE</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 不使用utc，所以在定时任务里面的时间应该比上海时间少8小时，比如要设置本地16:00执行，那么应该在定时里面设置成8:00</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CELERY_ENABLE_UTC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 应对django在使用mysql的时候设置USE_TZ = False导致的报错</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DJANGO_CELERY_BEAT_TZ_AWARE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 支持数据库django-db和缓存django-cache存储任务状态及结果</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CELERY_RESULT_BACKEND</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;django-db&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CELERY_CACHE_BACKEND</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;django-cache&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将任务调度器设为DatabaseScheduler</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CELERY_BEAT_SCHEDULER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;django_celery_beat.schedulers:DatabaseScheduler&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># celery内容等消息的格式设置，默认json</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CELERY_ACCEPT_CONTENT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CELERY_TASK_SERIALIZER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;json&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CELERY_RESULT_SERIALIZER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;json&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 每个 worker 最多执行n个任务就会被销毁，可防止内存泄露</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CELERY_WORKER_MAX_TASKS_PER_CHILD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 为存储结果设置过期日期，默认1天过期。如果beat开启，Celery每天会自动清除，0表示永不清理</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里可以设置成0，然后自己创建清理结果的机制，比较好控制</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CELERY_RESULT_EXPIRES</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div><p>这里主要对几个配置进行一下强调：</p><ul><li><code>CELERY_BROKER_URL</code> 这个是配置缓存的数据库地址，可以直接跟项目的redis配置保持一致，然后换一个库即可，比如Django自身用0，celery可以用1</li><li><code>CELERY_TIMEZONE</code> 这个是时区，直接使用Django的配置</li><li><code>CELERY_ENABLE_UTC</code> 是否用UTC，跟Django配置保持一致</li><li><code>DJANGO_CELERY_BEAT_TZ_AWARE</code> 如果使用了mysql当Django数据库的，这个必须填写False，因为mysql不支持TZ，这个配置可以避免报错，但是使用了这个之后，后台管理里面定时任务的时间会比上海时间差8小时，也就是现实是8点，在后台里面显示0点</li><li><code>CELERY_RESULT_EXPIRES</code> 这个参数是为了配置一个定时清理任务结果的定时任务，强烈建议设置0，不要内置的清理策略，自己定义一个清理策略更方便可控</li></ul><h2 id="添加celery文件" tabindex="-1">添加celery文件 <a class="header-anchor" href="#添加celery文件" aria-label="Permalink to &quot;添加celery文件&quot;">​</a></h2><p>配置设置完成后，需要在项目的配置文件的同目录添加一个celery.py文件用来作为django调用celery的文件，具体内容如下:</p><div class="language-baseh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">baseh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├── izone</span></span>
<span class="line"><span>│   ├── __init__.py</span></span>
<span class="line"><span>│   ├── celery.py</span></span>
<span class="line"><span>│   ├── settings.py</span></span>
<span class="line"><span>│   ├── urls.py</span></span>
<span class="line"><span>│   └── wsgi.py</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># izone/celery.py</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -*- coding:utf-8 -*-</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> celery </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Celery</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置环境变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.environ.setdefault(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DJANGO_SETTINGS_MODULE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;izone.settings&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 实例化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Celery(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;izone&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># namespace=&#39;CELERY&#39;作用是允许你在Django配置文件中对Celery进行配置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 但所有Celery配置项必须以CELERY开头，防止冲突</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.config_from_object(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;django.conf:settings&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">namespace</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;CELERY&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 自动从Django的已注册app中发现任务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.autodiscover_tasks()</span></span></code></pre></div><p>这个文件的主要作用就是导入celery库，并且指定celery的配置信息从Django的配置文件中读取，然后给celery分配了一个命名空间为项目名称，比如这里的izoned。</p><p>添加完celery.py之后，还需要在同目录的<code>__init__.py</code>文件中加入如下代码用来在Django启动的时候加载celery。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># izone/__init__.py</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .celery </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> celery_app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__all__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;celery_app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,)</span></span></code></pre></div><p>然后可以在同目录或者应用的目录里面添加一个tasks.py用来添加自定义的任务，比如下面添加一个简单的任务，用来模拟耗时的任务：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># izone/tasks.py</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -*- coding: utf-8 -*-</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> celery </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> shared_task</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@shared_task</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simple_task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    time.sleep(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y</span></span></code></pre></div><p>到此，配置文件就都完成了。</p><h2 id="迁移数据库" tabindex="-1">迁移数据库 <a class="header-anchor" href="#迁移数据库" aria-label="Permalink to &quot;迁移数据库&quot;">​</a></h2><p>配置信息和celery相关文件添加完成后，可以迁移数据库，主要是迁移的上面新增的两个应用的表。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Django</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> manage.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> makemigrations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Django</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> manage.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> migrate</span></span></code></pre></div><p>此时可以看到上面新增的应用创建的表信息，此时可以登录到后台看到两个应用的表。</p><p><img src="https://cdn.jsdelivr.net/gh/Hopetree/blog-img@main/article/2307/celery-db.png" alt=""></p><p>简单介绍一下这些表的作用：</p><ul><li>Task results：顾名思义，这个表是存放的任务的结果，也就是<code>django-celery-results</code>应用创建的表</li><li>Clocked：这个是定时任务的定时设置，可以添加一些定时的具体时间的实例</li><li>Crontabs：这个看表名称就很容易理解，可以设置crontab的定时任务</li><li>Intervals：这个是可以设置重复性任务，比如每小时执行，每天执行，每月执行这种</li><li>Periodic tasks：这个表才是真正用来添加定时任务的，上面的三个表都是添加的任务执行的时间和策略，这个表添加具体的任务，并且需要绑定上面的三个策略</li><li>Solar events：这个表可以忽略，根本用不到，感兴趣的可以去查一下是干嘛的</li></ul><h2 id="启动celery" tabindex="-1">启动celery <a class="header-anchor" href="#启动celery" aria-label="Permalink to &quot;启动celery&quot;">​</a></h2><p>完成数据迁移只是能看到数据表，任务是不能运行的，我们需要启动celery才行。</p><p>项目启动之后，重新创建一个命令行窗口，执行如下命令启动 celery的，celery的路径就是你项目的路径，比如我这里的一个虚拟环境</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/Users/timo/.pyenv/versions/3.9.2/bin/celery</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> izone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> worker</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> info</span></span></code></pre></div><p>不出意外的话，可以看到如下输出：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> --------------</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> celery@MacBook-Air.local</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v4.linux.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cliffs)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">---</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *****</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -----</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *******</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ----</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> macOS-13.linux.Django-arm64-arm-64bit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2023-07-16</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 12:45:20</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ***</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ---</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> **</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ----------</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [config]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> **</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ----------</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         izone:0x103ebbcd0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> **</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ----------</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> transport:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   redis://127.0.0.Django:6379/Django</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> **</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ----------</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> results:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ***</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ---</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> concurrency:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (prefork)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *******</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ----</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> task</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> events:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OFF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (enable </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-E</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> monitor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tasks</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> worker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">---</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *****</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -----</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> --------------</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [queues]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                .</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">celery</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           exchange=celery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">direct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">key=celery</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[tasks]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> easytask.tasks.baidu_push</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> easytask.tasks.check_friend</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> easytask.tasks.cleanup_task_result</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> easytask.tasks.clear_notification</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> easytask.tasks.simple_task</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> easytask.tasks.update_cache</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> imagekit.cachefiles.backends._generate_file</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[2023-07-16 12:45:20,896: INFO/MainProcess] Connected to redis://127.0.0.Django:6379/Django</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[2023-07-16 12:45:20,903: INFO/MainProcess] mingle: searching </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> neighbors</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[2023-07-16 12:45:21,923: INFO/MainProcess] mingle: all alone</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[2023-07-16 12:45:21,948: WARNING/MainProcess] /Users/timo/.pyenv/versions/3.9.2/lib/python3.9/site-packages/celery/fixups/django.py:202: UserWarning: Using settings.DEBUG leads to a memory</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            leak,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> never</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> setting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> production</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> environments!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  warnings.warn(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;&#39;&#39;Using settings.DEBUG leads to a memory</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[2023-07-16 12:45:21,948: INFO/MainProcess] celery@MacBook-Air.local ready.</span></span></code></pre></div><p>这就说明任务正常启动了，接着还有重新开一个窗口，启动定时任务:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/Users/timo/.pyenv/versions/3.9.2/bin/celery</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> izone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> beat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> info</span></span></code></pre></div><p>可以看到类似如下输出：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">celery</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> beat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v4.linux.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cliffs) is starting.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ...</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> __</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        _</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LocalTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2023-07-16</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 12:50:Redis</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> broker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis://127.0.0.Django:6379/Django</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> loader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> celery.loaders.app.AppLoader</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scheduler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> django_celery_beat.schedulers.DatabaseScheduler</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logfile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [stderr]@%INFO</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    .</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> maxinterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker.00</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (5s)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[2023-07-16 12:50:Redis,444: INFO/MainProcess] beat: Starting...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[2023-07-16 12:50:Redis,534: INFO/MainProcess] Scheduler: Sending due task 更新缓存 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">easytask.tasks.update_cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[2023-07-16 12:50:Redis,583: INFO/MainProcess] Scheduler: Sending due task 检查友链 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">easytask.tasks.check_friend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[2023-07-16 12:50:Redis,595: INFO/MainProcess] Scheduler: Sending due task 清理任务结果 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">easytask.tasks.cleanup_task_result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[2023-07-16 12:50:Redis,605: INFO/MainProcess] Scheduler: Sending due task 百度推送最近文章 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">easytask.tasks.baidu_push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><blockquote><p>记住：每次在项目的tasks.py 中更新或者添加了定时任务都需要重新运行上面的两个命令重新加载任务，在后台添加的任务是不需要重新启动的。</p></blockquote><h2 id="添加定时任务" tabindex="-1">添加定时任务 <a class="header-anchor" href="#添加定时任务" aria-label="Permalink to &quot;添加定时任务&quot;">​</a></h2><p>以上准备工作都做好了，可以去后台添加定时任务。</p><h3 id="添加一个策略" tabindex="-1">添加一个策略 <a class="header-anchor" href="#添加一个策略" aria-label="Permalink to &quot;添加一个策略&quot;">​</a></h3><p>首先需要添加定时任务的执行策略，比如添加一个一分钟执行一次的策略，可以到Intervals表中添加：</p><p><img src="https://cdn.jsdelivr.net/gh/Hopetree/blog-img@main/article/2307/celery-inerval.png" alt=""></p><p>其他策略也是类似的方式，具体使用三钟策略方式的哪个看需求。</p><h3 id="添加定时任务-1" tabindex="-1">添加定时任务 <a class="header-anchor" href="#添加定时任务-1" aria-label="Permalink to &quot;添加定时任务&quot;">​</a></h3><p>策略添加之后，可以去任务的表<code>Periodic tasks</code>中添加一个定时任务，这里就选择我们添加的那个简单的任务</p><p><img src="https://cdn.jsdelivr.net/gh/Hopetree/blog-img@main/article/2307/celery-task.png" alt=""></p><p>这里会让你选择一个任务，可选的任务就是我们在tasks.py中定义的任务，然后还需要选择一个执行策略，选择刚才添加的1分钟执行一次。</p><p>任务里面还可以配置执行参数，如果我们的任务函数可以添加参数的话，这里就可以进行配置，格式是json格式。比如我们添加的这个任务就是必须添加参数的，参数是x,y，我们可以在参数里面添加：</p><p><img src="https://cdn.jsdelivr.net/gh/Hopetree/blog-img@main/article/2307/task-args.png" alt=""></p><p>添加参数的方式有两种，一种是列表形式，另一种是字典形式，都可以，记住格式是json，后台会自动转化成python的参数。</p><p>我们这里就计算1+9等于多少。</p><h3 id="查看执行结果" tabindex="-1">查看执行结果 <a class="header-anchor" href="#查看执行结果" aria-label="Permalink to &quot;查看执行结果&quot;">​</a></h3><p>当添加完成任务后，可以去之前运行命令的窗口看一下日志，那个<code>celery -A izone beat -l info</code>的命令行中会提示有新的任务更新，等待一分钟还可以看到有任务执行的记录</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[2023-07-16 13:06:06,927: INFO/MainProcess] DatabaseScheduler: Schedule changed.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[2023-07-16 13:06:31,783: INFO/MainProcess] Scheduler: Sending due task 任务测试 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">easytask.tasks.simple_task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[2023-07-16 13:07:31,799: INFO/MainProcess] Scheduler: Sending due task 任务测试 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">easytask.tasks.simple_task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>然后去看另一个窗口，就是执行<code>celery -A izone worker -l info</code>的窗口，可以看到输出了任务的执行结果：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[2023-07-16 13:06:31,788: INFO/MainProcess] Received task: easytask.tasks.simple_task[c49d8905-77eb-4db8-95d5-4f9456ae05a3]  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[2023-07-16 13:06:33,838: INFO/ForkPoolWorker-8] Task easytask.tasks.simple_task[c49d8905-77eb-4db8-95d5-4f9456ae05a3] succeeded in 2.0387562920000164s: 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[2023-07-16 13:07:31,802: INFO/MainProcess] Received task: easytask.tasks.simple_task[a518cbc9-acc0-45ea-8652-c537873d0415]  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[2023-07-16 13:07:33,831: INFO/ForkPoolWorker-8] Task easytask.tasks.simple_task[a518cbc9-acc0-45ea-8652-c537873d0415] succeeded in 2.027986415999976s: 10</span></span></code></pre></div><h2 id="supervisor启动celery" tabindex="-1">supervisor启动celery <a class="header-anchor" href="#supervisor启动celery" aria-label="Permalink to &quot;supervisor启动celery&quot;">​</a></h2><p>经过上面的操作，我们已经成功在Django里面使用上了celery，可以灵活的添加定时任务，但是目前有个问题，就是需要开启三个窗口去分别运行项目和celery的服务，这在生产环境应该怎么做呢？</p><p>我之前的文章讲supervisor的使用的时候就提到了，我是因为要使用celery所以才将项目的运行方式换成supervisor的，所以现在就来添加进程配置。</p><p>在supervisord.conf中添加服务配置，用来启动celery的两个进程，具体的配置类似Django项目本身的配置，具体如下：</p><div class="language-conf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">conf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[program:celery-worker]</span></span>
<span class="line"><span>command=celery -A izone worker -l info</span></span>
<span class="line"><span>directory=/opt/cloud/izone</span></span>
<span class="line"><span>stdout_logfile=log/celery.worker.log</span></span>
<span class="line"><span>stderr_logfile=log/celery.worker.log</span></span>
<span class="line"><span>autostart=true</span></span>
<span class="line"><span>autorestart=true</span></span>
<span class="line"><span>startsecs=3</span></span>
<span class="line"><span>stopwaitsecs=3</span></span>
<span class="line"><span>priority=102</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[program:celery-beat]</span></span>
<span class="line"><span>command=celery -A izone beat -l info</span></span>
<span class="line"><span>directory=/opt/cloud/izone</span></span>
<span class="line"><span>stdout_logfile=log/celery.beat.log</span></span>
<span class="line"><span>stderr_logfile=log/celery.beat.log</span></span>
<span class="line"><span>autostart=true</span></span>
<span class="line"><span>autorestart=true</span></span>
<span class="line"><span>startsecs=2</span></span>
<span class="line"><span>stopwaitsecs=2</span></span>
<span class="line"><span>priority=101</span></span></code></pre></div><p>这样，在生产环境使用supervisor启动Django的同时也能启动celery服务。</p><h2 id="后续" tabindex="-1">后续 <a class="header-anchor" href="#后续" aria-label="Permalink to &quot;后续&quot;">​</a></h2><p>这篇文章主要是分享Django使用Celery执行定时任务的步骤，经过文章描述的操作，已经可以正常的添加和执行定时任务。</p><p>后续我会分享一些我目前的网站定义和添加的定时任务。</p>`,75)]))}const y=i(e,[["render",p]]);export{c as __pageData,y as default};
