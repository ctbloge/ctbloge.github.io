import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.CDhRSyRB.js";const o=JSON.parse('{"title":"使用 Ansible 工具批量操作虚拟机集群，自动化安装 Docker","description":"","frontmatter":{},"headers":[],"relativePath":"blog/docker/ansible-and-docker.md","filePath":"blog/docker/ansible-and-docker.md"}'),e={name:"blog/docker/ansible-and-docker.md"};function p(t,s,h,k,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="使用-ansible-工具批量操作虚拟机集群-自动化安装-docker" tabindex="-1">使用 Ansible 工具批量操作虚拟机集群，自动化安装 Docker <a class="header-anchor" href="#使用-ansible-工具批量操作虚拟机集群-自动化安装-docker" aria-label="Permalink to &quot;使用 Ansible 工具批量操作虚拟机集群，自动化安装 Docker&quot;">​</a></h1><p>ansible 是一个 Python 写的自动化工具，这个工具可以实现集群自动化管理，然后进行一些常用的运维操作。现在的公司很多都是使用的集群部署服务，少则几台虚拟机，多则几百上千台虚拟机，有的时候需要对一个集群或者多个集群集中进行运维操作，那么这个时候，ansible 就可以实现批量操作了。</p><p>我在公司主要负责的任务就是关于服务的自动化部署和运维，公司本身就属于云服务，而且非常多，所以部署的方式也有很多种版本，我接触到的自动化平台主要包括一下几种：</p><ol><li>以 ansible 脚本为主导而搭建的自动化部署升级平台</li><li>以类似 Jenkins 流水线而搭建的自动化构建和部署平台</li><li>以 SDK 包为基础，以 Python 脚本执行主导的运维平台</li><li>docker 容器+编排</li></ol><p>这篇文章分享一下使用 ansible 自动化安装 docker 和 docker-compose 的经验。</p><h2 id="安装ansible" tabindex="-1">安装ansible <a class="header-anchor" href="#安装ansible" aria-label="Permalink to &quot;安装ansible&quot;">​</a></h2><p>ansible 的管理机必须安装 python2，但是有个非常重要的点，那就是 Windows 不可以当做管理机，主机系统可以是 Red Hat, Debian, CentOS, OS X, BSD 的各种版本。</p><h3 id="使用pip安装" tabindex="-1">使用pip安装 <a class="header-anchor" href="#使用pip安装" aria-label="Permalink to &quot;使用pip安装&quot;">​</a></h3><p>由于 ansible 是一个 python 写的包，所以可以直接当做一个普通的第三方库来安装，直接运行命令安装即可:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ansible</span></span></code></pre></div><h3 id="使用yum或者apt-get安装" tabindex="-1">使用yum或者apt-get安装 <a class="header-anchor" href="#使用yum或者apt-get安装" aria-label="Permalink to &quot;使用yum或者apt-get安装&quot;">​</a></h3><p>ansible 也可以直接使用系统的包管理工具来安装，比如 CentOS 的 yum 命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ansible</span></span></code></pre></div><p>Ubuntu 系统的 apt-get 命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> software-properties-common</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-add-repository</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ppa:ansible/ansible</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ansible</span></span></code></pre></div><h2 id="ansible基本用法" tabindex="-1">ansible基本用法 <a class="header-anchor" href="#ansible基本用法" aria-label="Permalink to &quot;ansible基本用法&quot;">​</a></h2><h3 id="使用-ansible-playbook" tabindex="-1">使用 ansible-playbook <a class="header-anchor" href="#使用-ansible-playbook" aria-label="Permalink to &quot;使用 ansible-playbook&quot;">​</a></h3><p>ansible-playbook 也称之为剧本，是 ansible 把一系列自动化操作按照一定的执行顺序和执行逻辑进行组合起来的模块，使用这个模块可以更加方便地管理 ansible 任务。</p><p>ansible-playbook 命令可以作为运行一个 ansible 任务的开始，具体如何使用，可以查看帮助，下面这条是一般启动命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ansible-playbook</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker.yml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hosts</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> alex</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -k</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -K</span></span></code></pre></div><p>这个命令可以指定一个操作的用户，后续需要输入用户的密码和sudo命令。</p><p>由于 ansible 有很多非常有用的模块和命令可以使用，但是没有人能够全部记住每个模块命令，但是 ansible 有一个非常有用的命令使用查询文档，直接使用命令就可以查看某个模块的用法，还有例子：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 列出所有模块</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ansible-doc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 列出yum模块的使用方式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ansible-doc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum</span></span></code></pre></div><h3 id="ansible-playbook-目录结构" tabindex="-1">ansible-playbook 目录结构 <a class="header-anchor" href="#ansible-playbook-目录结构" aria-label="Permalink to &quot;ansible-playbook 目录结构&quot;">​</a></h3><p>下面是一个 ansible-playbook 项目的基本目录结构，具体的目录和文件作用已经注释出来：</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── group_vars           &lt;- 所有主机的公共变量存放位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   └── all</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── hosts                &lt;- 需要管理的主机的列表信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── roles              &lt;- roles 存放模块, 当前有 etcd, initial, loop 三个模块</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   ├── etcd</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   ├── files                    &lt;- 需要直接复制到 client 的文件存放位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   └── etcd-proxy.service            &lt;--即每个主机配置一样</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   ├── handlers                     &lt;- 用于服务管理用的控制文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   └── main.yml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   ├── tasks                        &lt;- ansible 任务文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   ├── config.yml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   ├── main.yml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   ├── package.yml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   └── service.yml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   └── templates                &lt;- 需要复制到 client 中的模板文件, 会配合变量进行配置变换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │       └── etcd-proxy.conf       &lt;-- 即每个主机配置可能不一样</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   ├── initial</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   ├── files</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   ├── hosts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   ├── resolv.conf</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   └── updatedb.conf</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   ├── handlers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   ├── tasks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   ├── main.yml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   ├── mlocate.yml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   ├── package.yml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   ├── sysctl.yml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   │   └── yumrepo.yml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │   └── templates</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │       ├── centos7.repo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   │       └── docker.repo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   └── loop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├── files</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├── handlers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       ├── tasks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       │   ├── main.yml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       │   └── t1.yml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       └── templates</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└── site.yml                           &lt;- 主控制入口文件</span></span></code></pre></div><h2 id="ansible-安装-docker" tabindex="-1">ansible 安装 docker <a class="header-anchor" href="#ansible-安装-docker" aria-label="Permalink to &quot;ansible 安装 docker&quot;">​</a></h2><p>我写了一个使用 ansible 自动化安装 docker 的剧本（项目地址：<a href="https://github.com/Hopetree/ansible-demos/tree/master/install_docker" target="_blank" rel="noreferrer">https://github.com/Hopetree/ansible-demos/tree/master/install_docker</a>），适合于在 CentOS 系统上面执行 docker 的安装。这个剧本做的事情包括判断 docker 是否可以用，然后包括安装 docker，添加用户到 docker 组，安装pip 和 docker-compose 等。剧本目录如下：</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+----docker.yml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+----group_vars</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|    +----all.yml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+----hosts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">+----roles</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|    +----docker</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|    |    +----tasks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|    |    |    +----install.yml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|    |    |    +----main.yml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|    |    +----templates</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|    |    |    +----daemon.json.j2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|    +----docker-compose</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|    |    +----tasks</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|    |    |    +----install_pip.yml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|    |    |    +----main.yml</span></span></code></pre></div><h3 id="尽量使用内置模块" tabindex="-1">尽量使用内置模块 <a class="header-anchor" href="#尽量使用内置模块" aria-label="Permalink to &quot;尽量使用内置模块&quot;">​</a></h3><p>所谓尽量使用内置模块的意思是当可以使用 shell 模块执行命令也可以使用内置的模块执行命令的时候应该尽量使用内置模块，比如下面这种，前面一种是使用命令行来安装包，后面一种是直接使用 yum 模块：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用shell 命令行安装</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">install yum-utils</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  shell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">yum install yum-utils</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用yum 模块安装</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">install yum-utils</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  yum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">yum-utils</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">present</span></span></code></pre></div><p>还有下面这种直接使用pip模块的：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">install docker-compose</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  pip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker-compose</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    extra_args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-i {{ pip.index_url }} --trusted-host {{ pip.trusted_host }}&quot;</span></span></code></pre></div><h3 id="register-when的使用" tabindex="-1">register+when的使用 <a class="header-anchor" href="#register-when的使用" aria-label="Permalink to &quot;register+when的使用&quot;">​</a></h3><p>register 可以用来把一个步骤的执行结果赋值到一个变量中，而 when 就可以用来判断一个变量的结果，所以通常可以把这两个模块结合起来使用。比如下面这段，第一个步骤是使用 <code>docker -v</code> 命令查询 docker 版本，然后第二个步骤判断当 docker 不可用的时候就执行 docker 安装。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">check docker</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  shell</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docker -v</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">result</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  ignore_errors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">include tasks yaml if not docker</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  include_tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">install.yml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">result is failed</span></span></code></pre></div><h3 id="执行结果" tabindex="-1">执行结果 <a class="header-anchor" href="#执行结果" aria-label="Permalink to &quot;执行结果&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/Hopetree/blog-img@main/article/190913/tendcode_2019-09-13_22-36-51.png" alt="执行结果"></p><p><img src="https://cdn.jsdelivr.net/gh/Hopetree/blog-img@main/article/190913/tendcode_2019-09-13_22-37-16.png" alt="执行结果"></p>`,40)]))}const c=i(e,[["render",p]]);export{o as __pageData,c as default};
