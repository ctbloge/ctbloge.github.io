import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.CDhRSyRB.js";const o=JSON.parse('{"title":"Git 常用及特殊命令笔记","description":"","frontmatter":{},"headers":[],"relativePath":"blog/git/git-note.md","filePath":"blog/git/git-note.md"}'),e={name:"blog/git/git-note.md"};function n(h,s,p,k,d,g){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="git-常用及特殊命令笔记" tabindex="-1">Git 常用及特殊命令笔记 <a class="header-anchor" href="#git-常用及特殊命令笔记" aria-label="Permalink to &quot;Git 常用及特殊命令笔记&quot;">​</a></h1><p>Git 作为个人和公司代码管理的最佳选择方案，熟悉各种常用的 git 命令操作显得尤为重要，这篇博文就作为自己的一个关于 git 常用和不常用命令的笔记，整理走一波！</p><h2 id="远程到本地" tabindex="-1">远程到本地 <a class="header-anchor" href="#远程到本地" aria-label="Permalink to &quot;远程到本地&quot;">​</a></h2><h3 id="克隆分支" tabindex="-1">克隆分支 <a class="header-anchor" href="#克隆分支" aria-label="Permalink to &quot;克隆分支&quot;">​</a></h3><ul><li>克隆远程项目到本地<br> 常规克隆（默认克隆主分支），不指定目录名称则使用项目名称：</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git clone &lt;repo&gt; [dirname=repo_name]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/Hopetree/izone.git</span></span></code></pre></div><ul><li>克隆指定分支到本地：</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git clone -b &lt;branch&gt; &lt;repo&gt; [dirname=repo_name]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/Hopetree/izone.git</span></span></code></pre></div><ul><li>克隆指定的深度（就是提交的历史）</li></ul><p>指定深度可以减少克隆的时候下载文件的大小，如果只需要克隆最后一次提交，可以设置 <code>--depth=1</code> 这样可以有效减少历史提交的二进制文件的大小，使得克隆代码更小，花费的时间也会更短</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --depth=1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/Hopetree/izone.git</span></span></code></pre></div><h2 id="本地到远程" tabindex="-1">本地到远程 <a class="header-anchor" href="#本地到远程" aria-label="Permalink to &quot;本地到远程&quot;">​</a></h2><h3 id="tag-操作" tabindex="-1">tag 操作 <a class="header-anchor" href="#tag-操作" aria-label="Permalink to &quot;tag 操作&quot;">​</a></h3><ul><li>推送本地 tag 到远程</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tags</span></span></code></pre></div><h2 id="本地操作" tabindex="-1">本地操作 <a class="header-anchor" href="#本地操作" aria-label="Permalink to &quot;本地操作&quot;">​</a></h2><h3 id="文件改动的增加和清除" tabindex="-1">文件改动的增加和清除 <a class="header-anchor" href="#文件改动的增加和清除" aria-label="Permalink to &quot;文件改动的增加和清除&quot;">​</a></h3><ul><li>添加改动文件<br> 添加所有改动文件（不包括 .gitignore 忽略的文件）：</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span></span></code></pre></div><p>添加 .gitignore 中忽略的文件：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span></span></code></pre></div><ul><li>删除所有未添加文件的改动（使 git status 恢复到 clean 状态）</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><ul><li>删除某个文件的当前修改（未提交）</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git checkout -- &lt;filename&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> readme.md</span></span></code></pre></div><ul><li>删除某个文件的当前修改（已提交）</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 首先要取消文件的暂存状态，执行取消暂存命令，然后执行删除修改的命令</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git reset HEAD -- &lt;filename&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> readme.md</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> readme.md</span></span></code></pre></div><h3 id="分支的操作" tabindex="-1">分支的操作 <a class="header-anchor" href="#分支的操作" aria-label="Permalink to &quot;分支的操作&quot;">​</a></h3><ul><li>本地已存在分支之间的切换</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git checkout &lt;branch&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div><ul><li>本地从远程分支拉取新建分支并切换到新分支</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin/dev</span></span></code></pre></div><ul><li>删除本地分支</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git branch -d &lt;branch&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 当分支上面还有未完成的提交时，需要强制删除</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div><h2 id="远程操作" tabindex="-1">远程操作 <a class="header-anchor" href="#远程操作" aria-label="Permalink to &quot;远程操作&quot;">​</a></h2><h3 id="查询" tabindex="-1">查询 <a class="header-anchor" href="#查询" aria-label="Permalink to &quot;查询&quot;">​</a></h3><ul><li>查询远程分支</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span></span></code></pre></div><ul><li>更新远程分支列表（当远程添加了新分支，但是本地没有查询到的时候）</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span></span></code></pre></div><h3 id="远程分支的增删" tabindex="-1">远程分支的增删 <a class="header-anchor" href="#远程分支的增删" aria-label="Permalink to &quot;远程分支的增删&quot;">​</a></h3><ul><li>删除远程分支</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git push origin --delete &lt;branch&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --delete</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div><h3 id="一个提交合入到多个分支" tabindex="-1">一个提交合入到多个分支 <a class="header-anchor" href="#一个提交合入到多个分支" aria-label="Permalink to &quot;一个提交合入到多个分支&quot;">​</a></h3><p>要将A分支的一个commit合并到B分支，可以进行如下操作</p><ol><li>切换到A分支：git checkout A</li><li>找到A分支提交的 commitID，如46d64dfr</li><li>切换到分支B：git checkout B</li><li>执行合入 git cherry-pick 46d64dfr，A 提交的 commit就会合入B分支</li></ol><h2 id="tag-操作-1" tabindex="-1">Tag 操作 <a class="header-anchor" href="#tag-操作-1" aria-label="Permalink to &quot;Tag 操作&quot;">​</a></h2><h3 id="创建-tag" tabindex="-1">创建 tag <a class="header-anchor" href="#创建-tag" aria-label="Permalink to &quot;创建 tag&quot;">​</a></h3><ul><li>本地创建 tag</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># git tag -a &lt;tag_name&gt; -m &#39;tag 注释&#39;</span></span>
<span class="line"><span>git tag -a v1-1.0 -m &#39;tag 注释&#39;</span></span></code></pre></div><ul><li>推送本地 tag 到远程仓库</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 推送本地所有tag</span></span>
<span class="line"><span>git push origin --tags</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 推送单个tag</span></span>
<span class="line"><span>git push origin &lt;tagname&gt;</span></span></code></pre></div><h3 id="删除-tag" tabindex="-1">删除 tag <a class="header-anchor" href="#删除-tag" aria-label="Permalink to &quot;删除 tag&quot;">​</a></h3><ul><li>删除本地 tag</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># git tag -d &lt;tag_name&gt;</span></span>
<span class="line"><span>git tag -d v1-1.0</span></span></code></pre></div><ul><li>删除远程 tag</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># git push origin --delete tag &lt;tag_name&gt;</span></span>
<span class="line"><span>git push origin --delete tag v1.0</span></span></code></pre></div><h2 id="回退" tabindex="-1">回退 <a class="header-anchor" href="#回退" aria-label="Permalink to &quot;回退&quot;">​</a></h2><ul><li>回退到某个历史提交</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git reset --hard &lt;commit SHA&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 7ad2e20d94ebfae5391bee38628ecfccf15982ac</span></span></code></pre></div><ul><li>回退之后强制提交</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git push -f origin &lt;branch&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div><h2 id="常见报错及处理方式" tabindex="-1">常见报错及处理方式 <a class="header-anchor" href="#常见报错及处理方式" aria-label="Permalink to &quot;常见报错及处理方式&quot;">​</a></h2><ul><li><strong>clone和push报错</strong></li></ul><p>报错内容包含如下信息</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fatal: Authentication failed for &#39;http://xxx&#39;</span></span></code></pre></div><p>这种错误一般都是跟用户账号有关，如果是clone的话，可以在clone命令中显式添加账号信息然后clone，命令如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://username:password@github.xxx.git</span></span></code></pre></div><h2 id="冷知识" tabindex="-1">冷知识 <a class="header-anchor" href="#冷知识" aria-label="Permalink to &quot;冷知识&quot;">​</a></h2><ul><li>.gitattributes 文件的使用</li></ul><p>在github上，如果未指定语言，Linguist来自动识别你的代码应该归为哪一类，它是根据某种语言的代码量来决定是哪种语言的项目。如果识别有误，可以新建.gitattributes文件来进行设置。格式如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.js linguist-language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Django</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.css linguist-language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Django</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.html linguist-language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Django</span></span></code></pre></div><ul><li><p>Git 飞行规则: <a href="https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md" target="_blank" rel="noreferrer">https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md</a></p></li><li><p>Git 代码统计命令</p></li></ul><p>统计某段时间内某个人代码提交量</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --author=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">--get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name)&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --pretty=tformat:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --numstat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --since</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ==2019-8-Django</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --until=2019-9-Django</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gawk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{ add += $Django ; subs += $2 ; loc += $Django - $2 } END { printf &quot;added lines: %s removed lines : %s total lines: %s\\n&quot;,add,subs,loc }&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span></span></code></pre></div><p>参考：<a href="https://blog.csdn.net/yjaspire/article/details/80921000" target="_blank" rel="noreferrer">https://blog.csdn.net/yjaspire/article/details/80921000</a></p><p>阮一峰博客：<a href="http://www.ruanyifeng.com/blog/2019/12/git-undo.html" target="_blank" rel="noreferrer">http://www.ruanyifeng.com/blog/2019/12/git-undo.html</a></p>`,77)]))}const c=i(e,[["render",n]]);export{o as __pageData,c as default};
