import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.CDhRSyRB.js";const o=JSON.parse('{"title":"终于理解了Nginx配置中location规则的优先级问题","description":"","frontmatter":{},"headers":[],"relativePath":"blog/nginx/nginx-location.md","filePath":"blog/nginx/nginx-location.md"}'),t={name:"blog/nginx/nginx-location.md"};function p(h,s,e,k,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="终于理解了nginx配置中location规则的优先级问题" tabindex="-1">终于理解了Nginx配置中location规则的优先级问题 <a class="header-anchor" href="#终于理解了nginx配置中location规则的优先级问题" aria-label="Permalink to &quot;终于理解了Nginx配置中location规则的优先级问题&quot;">​</a></h1><p>这周在项目中遇到一个问题：由于我们前端打包的时候把静态文件的.map文件也上传到了生产环境中，导致这些.map文件可以被访问下载，因此被定性为“有源码泄露的安全风险问题”。因此，需要禁用这些.map文件的访问，于是决定用Nginx添加配置来禁用，但是设置过程中发现怎么都不生效，最后经过了我的各种查找和提问，终于搞清楚了Nginx的配置中location规则的生效规律，最终也解决了问题。</p><h2 id="问题背景" tabindex="-1">问题背景 <a class="header-anchor" href="#问题背景" aria-label="Permalink to &quot;问题背景&quot;">​</a></h2><h3 id="项目需求" tabindex="-1">项目需求 <a class="header-anchor" href="#项目需求" aria-label="Permalink to &quot;项目需求&quot;">​</a></h3><p>基于上面提到的问题，这里还有一个限制条件：我们的项目中有个很多Nginx配置，我不能修改默认的配置，只能在默认配置的一个拓展配置中添加新配置，来解决.map文件可访问问题。</p><p>我们的这个默认配置关键内容如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> conf.d/console</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.conf.custom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ^~</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /itsc-mobile/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			proxy_pass</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://logic.itsc_mobile/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其他内容就省略了，其实就是说我不能修改这个默认文件，但是可以增加一个<code>console*.conf.custom</code>文件来添加额外的配置。</p><p>我要做的就是让用户无法访问<code>/itsc-mobile/static/js/main.45d35777.js.map</code>这种地址，也就是以<code>.js.map</code>或者<code>.css.map</code>结尾的文件，但是不能影响正常的js和css的访问，比如<code>/itsc-mobile/static/js/main.45d35777.js</code>需要正常访问。</p><h3 id="我的做法" tabindex="-1">我的做法 <a class="header-anchor" href="#我的做法" aria-label="Permalink to &quot;我的做法&quot;">​</a></h3><p>我想到的方案是添加一个正则的规则，匹配<code>.js.map</code>或者<code>.css.map</code>结尾的文件就返回403，这样就可以阻止用户访问这种文件了。</p><p>于是我在额外配置文件console-ext.conf.custom中添加了如下规则：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 403</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>但是经过验证，发现这个规则根本就不生效，期初以为是我配置的位置不对，后面经过一番验证发现跟配置的位置没关系，就是正则不生效。</p><p>于是带着这个问题，我经过了一番搜索和求证，终于搞清楚了Nginx配置里面location的规则的生效规律。</p><h2 id="location的语法" tabindex="-1">location的语法 <a class="header-anchor" href="#location的语法" aria-label="Permalink to &quot;location的语法&quot;">​</a></h2><p>这里我根据网上搜到的一些文章，还有官方文档的介绍，自己理解后对location的的语法进行了总结。</p><p>这里只讨论下面这种由4个部分组成的语法, 这4个组成部分分别是: location关键字 + 匹配方式符号(可省略)+匹配规则+如何处理, 这个最复杂也是最常用, 我们只讨论这个。</p><p>格式大概是这样的：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ^~</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">~</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ~*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ] uri { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }</span></span></code></pre></div><p>这里的匹配符号有5种：</p><ol><li>无符号：也就是匹配符号为空，算是一种前缀匹配，如 <code>location / {}</code></li><li><code>=</code>：表示精确匹配，如<code>location = /static/abc.png {}</code></li><li><code>^~</code>: 表示优先前缀匹配，如<code>location ^~ /static/js/ {}</code></li><li><code>~</code>: 表示区分大小写的正则匹配，如<code>location ~ /static/js/ {}</code></li><li><code>~*</code>: 表示不区分大小写的正则匹配，如<code>location ~* /static/js/ {}</code></li></ol><h2 id="location语法的优先级" tabindex="-1">location语法的优先级 <a class="header-anchor" href="#location语法的优先级" aria-label="Permalink to &quot;location语法的优先级&quot;">​</a></h2><p>我这里把这5种规则分成三类，分别是精确匹配、前缀匹配（无符号和优先前缀匹配），正则匹配。</p><h3 id="精确匹配" tabindex="-1">精确匹配 <a class="header-anchor" href="#精确匹配" aria-label="Permalink to &quot;精确匹配&quot;">​</a></h3><p>格式如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /static/abc.png</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 403</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>精确匹配是要求请求地址跟匹配项完全一致才算匹配成功，所以这种匹配是优先级最高的，只要匹配成功，就不会再进行其他规则的判断，直接返回。</p><h3 id="前缀匹配" tabindex="-1">前缀匹配 <a class="header-anchor" href="#前缀匹配" aria-label="Permalink to &quot;前缀匹配&quot;">​</a></h3><p>首先是无符号的前缀匹配：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /static/js/css/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 405</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /static/js/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 405</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>然后是有符号的前缀匹配，这种我称之为优先前缀匹配</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ^~</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /static/js/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 404</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>这两个的优先级规律是：命中任何一个前缀匹配的话，还会继续往下去进行规则匹配，并且会从这两个规则中选择匹配到的最长的前缀作为结果，而如果长度相同，那么优先级前缀优先，此时直接返回优先前缀匹配，如果是无符号匹配的更长，则继续去匹配正则规则。</p><p>一个例子：<code>/static/js/css/abc</code> 这个地址同时被上面的两个前缀规则匹配，但是很明显无符号的规则可以匹配到<code>/static/js/css/</code>比有符号的匹配前缀<code>/static/js/</code> 长，所以会选择<code>/static/js/css/</code>最为临时返回规则，进一步去找正则规则。</p><p>而<code>/static/js/abc</code> 这个地址也同时被上面的规则匹配，但是两个都是匹配到<code>/static/js/</code>，长度一样，此时有符号的优先级就更高，并且不会继续找正则匹配，直接返回。</p><h3 id="正则匹配" tabindex="-1">正则匹配 <a class="header-anchor" href="#正则匹配" aria-label="Permalink to &quot;正则匹配&quot;">​</a></h3><p>格式如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 402</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>正则匹配的优先级相对比较低，从上面的前缀匹配也能看到，当无符号的前缀匹配到的情况下才会进行正则匹配，并且如果此时正则匹配到了，那么会取正则的结果，否则取无符号前缀匹配的结果</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>我经过咨询和学习，对location这里的规则进行了一个总结，并且画了一个流程图来体现：</p><p><img src="https://cdn.jsdelivr.net/gh/Hopetree/blog-img@main/2023/12/Nginx%E9%85%8D%E7%BD%AElocation%E8%A7%84%E5%88%99.png" alt=""></p><p>有如下结论：</p><ul><li>首先，不同规则在文件中的顺序对规则的匹配不受影响，只有同类型规则的顺序至上到下进行匹配时是先匹配先生效的</li><li>精确匹配优先级最高，只要匹配到就立即返回（最长匹配项），不会进行下一步匹配</li><li>前缀匹配中会取匹配到的最长前缀作为预选，当无符号的匹配最长时，还需要进行正则匹配，当优先前缀最长时，直接返回</li><li>“正则匹配的优先级很低”这个说法其实是不准确的，因为当匹配能到达正则匹配这里的时候，正则匹配的优先级就是最高的，只要匹配就返回，所以真正的问题是匹配会不会到正则匹配这里</li></ul><h2 id="一个典型案例" tabindex="-1">一个典型案例 <a class="header-anchor" href="#一个典型案例" aria-label="Permalink to &quot;一个典型案例&quot;">​</a></h2><p>在 Nginx 版本为1.20.1版本条件下，有如下配置文件：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> abc.com</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    access_log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  /var/log/nginx/test.access.log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    error_log</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   /var/log/nginx/test.error.log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">png</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 402</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /static/js/css/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 405</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ^~</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /static/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 401</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ^~</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /static/js/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 404</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /static/abc.png</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 403</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>请写出下面的地址的返回码（可以在这个网站上面进行验证 <a href="https://nginx.viraptor.info/" target="_blank" rel="noreferrer">https://nginx.viraptor.info/</a>）：</p><p><code>/static/js/css/4.png</code> 这个地址会返回402，因为它同时被无符号前缀和有符号前缀匹配到，但是无符号前缀<code>/static/js/css/</code>更长，此时就继续进行正则匹配，发现可以被正则匹配到，所以返回了正则匹配的状态码402</p><p>匹配过程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Hopetree/blog-img@main/2023/12/Snipaste_2023-12-22_15-31-30%20%281%29.png" alt=""></p><p><code>/static/js/4.png</code>这个地址仅被两个优先前缀匹配，所以直接返回优先前缀匹配最长的<code>/static/js/</code>的404</p><p><code>/static/js/css6/4.png</code>这个地址同时被两个优先级前缀匹配，所以选择最长的返回404</p><p>匹配过程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Hopetree/blog-img@main/2023/12/Snipaste_2023-12-22_15-32-17%20%281%29.png" alt=""></p><p>这3个地址的匹配我最开始非常不理解，特别是第1个和第3个的对比，并且把这个疑惑发到了V站进行讨论，也正是这个<a href="https://www.v2ex.com/t/1002226#reply29" title="讨论" target="_blank" rel="noreferrer">讨论🔗</a>，让我理解了这里的规律。</p><h2 id="学以致用" tabindex="-1">学以致用 <a class="header-anchor" href="#学以致用" aria-label="Permalink to &quot;学以致用&quot;">​</a></h2><p>经过上面的学习，我知道了正则的规则生效的条件，所以我想到了解决项目上问题的方案，之前我配置的正则不生效是因为地址被优先前缀匹配到了，所以直接返回了，根本不会到正则判断这一步，所以为了使正则生效，我需要额外添加一个无符号前缀匹配才行，我的解决方案是这样的：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">css</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 403</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /itsc-mobile/static/js/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    proxy_pass</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://logic.itsc_mobile/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>我在拓展文件中添加了两个规则，第一个规则自然是正则匹配了，第二个规则是一个无符号前缀匹配规则，这个规则需要比原本的优先级前缀匹配规则长，这样才能走到这里，进而走向正则匹配。</p><h2 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>其实在项目里面经常会遇到需要配置Nginx规则的事情，而我们项目里面配置文件又多，规则根本就理不清楚，所以之前配置的时候经常也是不停试探。经过了这次的学习，我总算是理清楚了location的规则，也经过了验证是理解正确的，后续再遇到Nginx配置规则不生效或者产出冲突，就可以按照这个思路去定位解决了。</p>`,63)]))}const F=i(t,[["render",p]]);export{o as __pageData,F as default};
